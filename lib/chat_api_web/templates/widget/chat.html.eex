<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Chat Widget</title>
    <script src="https://cdn.jsdelivr.net/npm/phoenix@1.5.3/priv/static/phoenix.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: #fff;
            height: 100vh;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <div id="chat-widget-root"></div>
    <script>
        // Extract config from URL params
        const params = new URLSearchParams(window.location.search);
        const config = {
            // Core settings
            token: params.get('token') || params.get('accountId'),
            inbox: params.get('inbox'),
            baseUrl: params.get('baseUrl') || window.location.origin,
            
            // Appearance
            title: decodeURIComponent(params.get('title') || 'Chat'),
            subtitle: decodeURIComponent(params.get('subtitle') || ''),
            primaryColor: params.get('primaryColor') || '#1890ff',
            
            // Messages
            greeting: decodeURIComponent(params.get('greeting') || ''),
            newMessagePlaceholder: decodeURIComponent(params.get('newMessagePlaceholder') || 'Type your message...'),
            agentAvailableText: decodeURIComponent(params.get('agentAvailableText') || ''),
            agentUnavailableText: decodeURIComponent(params.get('agentUnavailableText') || ''),
            
            // Features
            showAgentAvailability: params.get('showAgentAvailability') === '1',
            requireEmailUpfront: params.get('requireEmailUpfront') === '1',
            isBrandingHidden: params.get('isBrandingHidden') === 'true',
            
            // Metadata
            companyName: params.get('companyName') || '',
            metadata: params.get('metadata') || '{}',
            
            // Internal state
            customerId: null,
            conversationId: null
        };

        console.log('Chat widget initialized with config:', config);

        // This will be replaced with the actual chat widget component
        // For now, just render a simple placeholder
        const rootEl = document.getElementById('chat-widget-root');
        rootEl.innerHTML = 
            '<div style="padding: 20px; height: 100vh; display: flex; flex-direction: column;">' +
                '<div style="border-bottom: 1px solid #eee; padding-bottom: 10px; margin-bottom: 10px;">' +
                    '<h2 style="color: ' + config.primaryColor + '; margin: 0;">' + config.title + '</h2>' +
                    '<p style="color: #666; font-size: 14px; margin: 5px 0 0 0;">' + config.subtitle + '</p>' +
                '</div>' +
                '<div id="messages" style="flex: 1; overflow-y: auto; padding: 10px 0;"></div>' +
                '<div style="display: flex; gap: 10px; padding-top: 10px; border-top: 1px solid #eee;">' +
                    '<input type="text" id="message-input" placeholder="' + config.newMessagePlaceholder + '" ' +
                        'style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" />' +
                    '<button id="send-btn" ' +
                        'style="padding: 10px 20px; background: ' + config.primaryColor + '; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 14px;">' +
                        'Send' +
                    '</button>' +
                '</div>' +
            '</div>';

        const messagesEl = document.getElementById('messages');
        const inputEl = document.getElementById('message-input');
        const sendBtn = document.getElementById('send-btn');

        function addMessage(text, isCustomer = false) {
            const msgDiv = document.createElement('div');
            msgDiv.style.cssText = `
                margin: 10px 0;
                padding: 10px;
                border-radius: 8px;
                max-width: 80%;
                ${isCustomer ? 
                    `background: ${config.primaryColor}; color: white; margin-left: auto;` : 
                    'background: #f0f0f0; color: #333; margin-right: auto;'
                }
            `;
            msgDiv.textContent = text;
            messagesEl.appendChild(msgDiv);
            messagesEl.scrollTop = messagesEl.scrollHeight;
        }

        async function sendMessage() {
            const text = inputEl.value.trim();
            if (!text) return;

            addMessage(text, true);
            inputEl.value = '';

            try {
                // Create customer if needed
                if (!config.customerId) {
                    const customerResp = await fetch(`${config.baseUrl}/api/customers`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            customer: {
                                account_id: config.token,
                                inbox_id: config.inbox
                            }
                        })
                    });
                    const customerData = await customerResp.json();
                    config.customerId = customerData.data.id;
                }

                // Create conversation with message
                const convResp = await fetch(`${config.baseUrl}/api/conversations`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        conversation: {
                            account_id: config.token,
                            inbox_id: config.inbox,
                            customer_id: config.customerId,
                            status: 'open'
                        },
                        message: {
                            body: text,
                            sent_at: new Date().toISOString()
                        }
                    }
                });
                const convData = await convResp.json();
                config.conversationId = convData.data.id;

                // Connect to Phoenix channel for real-time updates
                connectToConversation(config.conversationId);

            } catch (error) {
                console.error('Error sending message:', error);
                addMessage('Sorry, there was an error sending your message. Please try again.');
            }
        }

        let socket = null;
        let channel = null;

        function connectToConversation(conversationId) {
            if (channel) return; // Already connected

            const socketUrl = '/socket';
            socket = new Phoenix.Socket(socketUrl, {params: {}});
            
            socket.onOpen(() => console.log('Socket connected'));
            socket.onError(() => console.log('Socket error'));
            
            socket.connect();

            channel = socket.channel(`conversation:${conversationId}`, {
                customer_id: config.customerId
            });

            channel.on('shout', (payload) => {
                console.log('Message received:', payload);
                if (!payload.user_id && payload.body && payload.type === 'bot') {
                    addMessage(payload.body);
                }
            });

            channel.join()
                .receive('ok', () => console.log('Joined conversation channel'))
                .receive('error', (err) => console.error('Failed to join:', err));
        }

        sendBtn.addEventListener('click', sendMessage);
        inputEl.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        // Show greeting and availability status
        if (config.greeting) {
            addMessage(config.greeting);
        }
        
        if (config.showAgentAvailability) {
            const availabilityText = config.agentAvailableText || 'We\'re online and ready to help!';
            const statusDiv = document.createElement('div');
            statusDiv.style.cssText = 'text-align: center; padding: 10px; color: #666; font-size: 12px;';
            statusDiv.innerHTML = `<span style="color: #52c41a;">‚óè</span> ${availabilityText}`;
            messagesEl.insertBefore(statusDiv, messagesEl.firstChild);
        }
        
        // Show branding (if not hidden)
        if (!config.isBrandingHidden) {
            const brandDiv = document.createElement('div');
            brandDiv.style.cssText = 'text-align: center; padding: 10px; margin-top: 10px; border-top: 1px solid #eee;';
            brandDiv.innerHTML = `<a href="https://netia.ai" target="_blank" style="color: #999; font-size: 11px; text-decoration: none;">Powered by ${config.companyName || 'Netia'}</a>`;
            document.body.appendChild(brandDiv);
        }
    </script>
</body>
</html>

